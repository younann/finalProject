pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2'
        ECR_REPO_NAME        = 'devsecops'
        ECR_URL             = '211125613373.dkr.ecr.us-west-2.amazonaws.com/devsecops'
        GIT_BRANCH          = 'impl-new'  
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Clean workspace
                    cleanWs()
                    
                    // Checkout specific branch
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${GIT_BRANCH}"]],
                        userRemoteConfigs: [[
                            url: 'https://github.com/younann/finalProject.git'
                        ]]
                    ])
                    
                    // Verify we're on the right branch and have the latest code
                    sh '''
                        echo "Current branch:"
                        git branch --show-current
                        echo "Latest commit:"
                        git log -1
                        echo "HTML content:"
                        cat templates/index.html
                    '''
                }
            }
        }

        stage('Build and Push') {
            steps {
                script {
                    def timestamp = sh(script: 'date +%Y%m%d-%H%M%S', returnStdout: true).trim()
                    def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.BUILD_TAG = "${timestamp}-${commitHash}"
                    
                    sh '''
                        # Clean any existing images
                        docker rmi -f $(docker images -q ${ECR_URL}) || true
                        
                        # Build fresh image
                        echo "Building image with tag: ${BUILD_TAG}"
                        docker build --no-cache -t ${ECR_REPO_NAME}:${BUILD_TAG} .
                        
                        # ECR login
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                        
                        # Tag and push
                        docker tag ${ECR_REPO_NAME}:${BUILD_TAG} ${ECR_URL}:${BUILD_TAG}
                        docker tag ${ECR_REPO_NAME}:${BUILD_TAG} ${ECR_URL}:latest
                        
                        docker push ${ECR_URL}:${BUILD_TAG}
                        docker push ${ECR_URL}:latest
                        
                        echo ${BUILD_TAG} > build.tag
                    '''
                }
            }
        }

        stage('Deploy to K8s') {
            steps {
                script {
                    def buildTag = sh(script: 'cat build.tag', returnStdout: true).trim()
                    
                    sh '''
                        # Configure kubectl
                        aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name devsecops-eks-cluster
                        
                        # Remove old pods
                        echo "Removing existing pods..."
                        kubectl delete pods -n devsecops -l app=python-app --grace-period=0 --force || true
                    '''
                    
                    sh """
                        # Update deployment
                        kubectl set image deployment/python-app -n devsecops python-app=${ECR_URL}:${BUILD_TAG}
                        
                        # Force update
                        kubectl patch deployment python-app -n devsecops -p \
                            '{"spec":{"template":{"metadata":{"annotations":{"kubectl.kubernetes.io/restartedAt":"'"\$(date +%s)"'"}}}}}}'
                    """
                    
                    sh '''
                        # Wait for rollout
                        kubectl rollout status deployment/python-app -n devsecops --timeout=180s
                        
                        # Verify deployment
                        echo "Pod status:"
                        kubectl get pods -n devsecops -l app=python-app
                        echo "Deployed image:"
                        kubectl get deployment python-app -n devsecops -o jsonpath='{.spec.template.spec.containers[0].image}'
                        
                        # Get service URL
                        SERVICE_URL=$(kubectl get svc python-app-service -n devsecops -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                        echo "Service URL: $SERVICE_URL"
                        
                        # Test the endpoint
                        curl -s "$SERVICE_URL"
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            sh '''
                docker rmi -f $(docker images -q ${ECR_URL}) || true
            '''
        }
        success {
            echo "Deployment successful! Check the service URL above."
        }
        failure {
            echo "Deployment failed. Check the logs for details."
        }
    }
}