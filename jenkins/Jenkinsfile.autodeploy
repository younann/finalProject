pipeline {
    agent any

    parameters {
        booleanParam(name: 'SKIP_TERRAFORM', defaultValue: false, description: 'Skip Terraform deployment?')
        booleanParam(name: 'FORCE_TERRAFORM', defaultValue: false, description: 'Force Terraform apply even if no changes?')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2'
        ECR_REPO_NAME        = 'python-app-repo'
        IMAGE_TAG            = 'latest'
        ECR_URL             = '211125613373.dkr.ecr.us-west-2.amazonaws.com/devsecops'
    }

    stages {
        stage('Parallel Init and Build') {
            parallel {
                stage('Setup') {
                    steps {
                        parallel(
                            "Checkout": {
                                git branch: 'main', url: 'https://github.com/younann/finalProject.git'
                            },
                            "AWS Auth": {
                                sh '''
                                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                                    aws configure set region $AWS_DEFAULT_REGION
                                    aws sts get-caller-identity
                                    # Pre-authenticate with ECR to save time later
                                    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                                '''
                            }
                        )
                    }
                }
                
                stage('Infrastructure Check') {
                    when {
                        expression { return !params.SKIP_TERRAFORM }
                    }
                    steps {
                        dir('infra') {
                            script {
                                // First check if infrastructure exists
                                def infraExists = sh(
                                    script: '''
                                        terraform init -input=false
                                        # Quick check for EKS cluster existence
                                        if aws eks describe-cluster --name devsecops-eks-cluster --region ${AWS_DEFAULT_REGION} >/dev/null 2>&1; then
                                            echo "true"
                                        else
                                            echo "false"
                                        fi
                                    ''',
                                    returnStdout: true
                                ).trim()

                                env.INFRA_EXISTS = infraExists

                                if (infraExists == 'true' && !params.FORCE_TERRAFORM) {
                                    echo "Infrastructure exists, skipping Terraform"
                                    env.TERRAFORM_CHANGES = 'false'
                                } else {
                                    def planResult = sh(
                                        script: 'terraform plan -detailed-exitcode -out=tfplan -input=false',
                                        returnStatus: true
                                    )
                                    env.TERRAFORM_CHANGES = planResult == 2 ? 'true' : 'false'
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Build and Test') {
            parallel {
                stage('Build and Push') {
                    steps {
                        script {
                            sh '''
                                docker build -t ${ECR_REPO_NAME}:${IMAGE_TAG} .
                                docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_URL}:${IMAGE_TAG}
                                docker push ${ECR_URL}:${IMAGE_TAG}
                            '''
                        }
                    }
                }
                
                stage('Unit Tests') {
                    steps {
                        sh 'docker run --rm -e PYTHONPATH=/app -w /app ${ECR_REPO_NAME}:${IMAGE_TAG} pytest'
                    }
                }
            }
        }

        stage('Deploy') {
            parallel {
                stage('Terraform Apply') {
                    when {
                        expression { 
                            return !params.SKIP_TERRAFORM && 
                                   (env.TERRAFORM_CHANGES == 'true' || params.FORCE_TERRAFORM) &&
                                   (env.INFRA_EXISTS == 'false' || params.FORCE_TERRAFORM)
                        }
                    }
                    steps {
                        dir('infra') {
                            sh 'terraform apply -auto-approve tfplan'
                        }
                    }
                }

                stage('Update Kubernetes') {
                    steps {
                        script {
                            sh '''
                                # Update kubeconfig if needed
                                if ! kubectl config current-context &>/dev/null; then
                                    aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name devsecops-eks-cluster
                                fi
                                
                                # Apply all configurations in parallel
                                kubectl create namespace devsecops --dry-run=client -o yaml | kubectl apply -f - &
                                kubectl apply -f k8s/aws-auth.yaml &
                                kubectl apply -f k8s/test.yaml &
                                wait
                                
                                # Wait for deployment
                                kubectl rollout status deployment/python-app -n devsecops --timeout=180s
                            '''
                        }
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    parallel(
                        "Service Check": {
                            def serviceUrl = sh(
                                script: "kubectl get svc python-app-service -n devsecops -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'",
                                returnStdout: true
                            ).trim()
                            sh "curl -sf http://${serviceUrl}"
                        },
                        "Pod Check": {
                            sh "kubectl wait --for=condition=ready pod -l app=python-app -n devsecops --timeout=180s"
                        }
                    )
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            script {
                if (!params.SKIP_TERRAFORM && env.TERRAFORM_CHANGES == 'true') {
                    dir('infra') {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
        cleanup {
            sh "docker rmi ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_URL}:${IMAGE_TAG} || true"
        }
    }
}