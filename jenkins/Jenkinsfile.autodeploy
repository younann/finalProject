pipeline {
    agent any

    parameters {
        booleanParam(name: 'SKIP_TERRAFORM', defaultValue: false, description: 'Skip Terraform deployment?')
        booleanParam(name: 'FORCE_TERRAFORM', defaultValue: false, description: 'Force Terraform apply even if no changes?')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2'
        ECR_REPO_NAME        = 'devsecops'
        IMAGE_TAG            = 'latest'
        ECR_URL             = '211125613373.dkr.ecr.us-west-2.amazonaws.com/devsecops'
    }

    stages {
        stage('Setup') {
            steps {
                git branch: 'main', url: 'https://github.com/younann/finalProject.git'
                sh '''
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set region $AWS_DEFAULT_REGION
                    aws sts get-caller-identity
                    # Pre-authenticate with ECR
                    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                '''
            }
        }

        stage('Build') {
            steps {
                script {
                    sh '''
                        docker build -t ${ECR_REPO_NAME}:${IMAGE_TAG} .
                    '''
                }
            }
        }

        stage('Test and Push') {
            parallel {
                stage('Run Tests') {
                    steps {
                        sh 'docker run --rm -e PYTHONPATH=/app -w /app ${ECR_REPO_NAME}:${IMAGE_TAG} pytest'
                    }
                }
                
                stage('Push to ECR') {
                    steps {
                        script {
                            sh '''
                                docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_URL}:${IMAGE_TAG}
                                docker push ${ECR_URL}:${IMAGE_TAG}
                            '''
                        }
                    }
                }
            }
        }

        stage('Infrastructure Check') {
            when {
                expression { return !params.SKIP_TERRAFORM }
            }
            steps {
                dir('infra') {
                    script {
                        // First check if infrastructure exists and is healthy
                        def infraExists = sh(
                            script: '''
                                # Check if EKS cluster exists and is ACTIVE
                                if aws eks describe-cluster --name devsecops-eks-cluster --region ${AWS_DEFAULT_REGION} 2>/dev/null | grep -q "ACTIVE"; then
                                    echo "true"
                                else
                                    echo "false"
                                fi
                            ''',
                            returnStdout: true
                        ).trim()

                        env.INFRA_EXISTS = infraExists

                        if (infraExists == 'true' && !params.FORCE_TERRAFORM) {
                            echo "Infrastructure exists and is healthy. Skipping Terraform operations."
                            env.TERRAFORM_CHANGES = 'false'
                        } else {
                            echo "Running Terraform plan to check for infrastructure changes..."
                            sh 'terraform init -input=false'
                            def planResult = sh(
                                script: 'terraform plan -detailed-exitcode -out=tfplan -input=false || true',
                                returnStatus: true
                            )
                            // planResult: 0 = no changes, 1 = error, 2 = changes needed
                            env.TERRAFORM_CHANGES = planResult == 2 ? 'true' : 'false'
                            
                            if (env.TERRAFORM_CHANGES == 'false') {
                                echo "No infrastructure changes needed."
                            } else {
                                echo "Infrastructure changes detected."
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            parallel {
                stage('Terraform Apply') {
                    when {
                        expression { 
                            return !params.SKIP_TERRAFORM && 
                                   (env.TERRAFORM_CHANGES == 'true' || params.FORCE_TERRAFORM) &&
                                   (env.INFRA_EXISTS == 'false' || params.FORCE_TERRAFORM)
                        }
                    }
                    steps {
                        dir('infra') {
                            script {
                                echo "Applying infrastructure changes..."
                                sh 'terraform apply -auto-approve tfplan'
                            }
                        }
                    }
                }

                stage('Update Kubernetes') {
                    steps {
                        script {
                            sh '''
                                if ! kubectl config current-context &>/dev/null; then
                                    aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name devsecops-eks-cluster
                                fi
                                
                                # Apply configurations
                                kubectl create namespace devsecops --dry-run=client -o yaml | kubectl apply -f -
                                kubectl apply -f k8s/aws-auth.yaml
                                kubectl apply -f k8s/test.yaml
                                
                                # Wait for deployment with new image
                                kubectl rollout status deployment/python-app -n devsecops --timeout=180s
                            '''
                        }
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                parallel(
                    "Service Check": {
                        script {
                            def serviceUrl = sh(
                                script: "kubectl get svc python-app-service -n devsecops -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'",
                                returnStdout: true
                            ).trim()
                            sh "curl -sf http://${serviceUrl}"
                        }
                    },
                    "Pod Check": {
                        sh "kubectl wait --for=condition=ready pod -l app=python-app -n devsecops --timeout=180s"
                    }
                )
            }
        }
    }

    post {
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            script {
                if (!params.SKIP_TERRAFORM && env.TERRAFORM_CHANGES == 'true') {
                    dir('infra') {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
        cleanup {
            sh "docker rmi ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_URL}:${IMAGE_TAG} || true"
        }
    }
}