pipeline {
    agent any

    parameters {
        booleanParam(name: 'SKIP_TERRAFORM', defaultValue: true, description: 'Skip Terraform deployment?')
        booleanParam(name: 'FORCE_TERRAFORM', defaultValue: false, description: 'Force Terraform apply even if no changes?')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2'
        ECR_REPO_NAME        = 'devsecops'
        IMAGE_TAG            = 'latest'
        ECR_URL             = '211125613373.dkr.ecr.us-west-2.amazonaws.com/devsecops'
    }

    stages {
        stage('Quick Setup') {
            steps {
                git branch: 'main', url: 'https://github.com/younann/finalProject.git'
                sh '''
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set region $AWS_DEFAULT_REGION
                    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                '''
            }
        }

        stage('Build and Push') {
            steps {
                script {
                    sh '''
                        docker build -t ${ECR_REPO_NAME}:${IMAGE_TAG} .
                        docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_URL}:${IMAGE_TAG}
                        docker push ${ECR_URL}:${IMAGE_TAG}
                    '''
                }
            }
        }

        stage('Check Infrastructure') {
            when {
                expression { return !params.SKIP_TERRAFORM }
            }
            steps {
                script {
                    def clusterExists = sh(
                        script: 'aws eks describe-cluster --name devsecops-eks-cluster --region ${AWS_DEFAULT_REGION} 2>/dev/null || echo "false"',
                        returnStdout: true
                    ).trim()
                    
                    env.NEEDS_TERRAFORM = clusterExists == 'false' ? 'true' : 'false'
                    
                    if (env.NEEDS_TERRAFORM == 'false' && !params.FORCE_TERRAFORM) {
                        echo "Cluster exists and running. Skipping Terraform."
                    } else {
                        echo "Infrastructure needs to be created or updated."
                    }
                }
            }
        }

        stage('Apply Infrastructure') {
            when {
                expression { 
                    return !params.SKIP_TERRAFORM && 
                           (env.NEEDS_TERRAFORM == 'true' || params.FORCE_TERRAFORM)
                }
            }
            steps {
                dir('infra') {
                    sh '''
                        terraform init -input=false
                        terraform apply -auto-approve
                    '''
                }
            }
        }

        stage('Deploy to K8s') {
            steps {
                script {
                    sh '''
                        # Ensure we have kubectl access
                        aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name devsecops-eks-cluster

                        # Quick namespace setup
                        kubectl create namespace devsecops --dry-run=client -o yaml | kubectl apply -f -

                        # Force new deployment
                        TIMESTAMP=$(date +%s)
                        kubectl set env deployment/python-app -n devsecops DEPLOYMENT_TIMESTAMP=$TIMESTAMP || true
                        kubectl apply -f k8s/test.yaml

                        # Wait for rollout
                        kubectl rollout status deployment/python-app -n devsecops --timeout=90s
                    '''
                }
            }
        }

        stage('Quick Health Check') {
            steps {
                script {
                    sh '''
                        # Get service URL
                        for i in {1..6}; do
                            SERVICE_URL=$(kubectl get svc python-app-service -n devsecops -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                            if [ ! -z "$SERVICE_URL" ]; then
                                echo "Service URL: $SERVICE_URL"
                                
                                # Test endpoint
                                if curl -sf http://${SERVICE_URL}; then
                                    echo "Application is responding!"
                                    exit 0
                                fi
                            fi
                            echo "Waiting for service... Attempt $i/6"
                            sleep 10
                        done
                        
                        echo "Service not responding in time"
                        exit 1
                    '''
                }
            }
        }
    }

    post {
        always {
            sh "docker rmi ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_URL}:${IMAGE_TAG} || true"
        }
        failure {
            echo 'Deployment failed!'
        }
        success {
            echo 'Deployment successful!'
        }
    }
}