pipeline {
    agent any

    environment { // Global parameters
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2'
        ECR_REPO_NAME         = 'python-app-repo'
        IMAGE_TAG             = 'latest'
        ECR_URL               = '211125613373.dkr.ecr.us-west-2.amazonaws.com/devsecops'
    }

    stages {
        stage('Checkout Code') { // Check the code
            steps {
                git branch: 'main', url: 'https://github.com/younann/finalProject.git'
            }
        }

        stage('AWS Authentication') { // Set AWS CLI for our code
            steps {
                sh '''
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set region $AWS_DEFAULT_REGION
                    aws sts get-caller-identity
                '''
            }
        }


     
        stage('Terraform') {
            when {
                expression { return !params.SKIP_TERRAFORM }
            }
            steps {
                dir('infra') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }
    


        
    stage('Manual Approval') {
            steps {
                script {
                    // Pause the pipeline and wait for manual approval
                    def proceed = input(
                        id: 'Proceed', 
                        message: 'Do you want to proceed to the next stage?', 
                        parameters: [
                            choice(choices: ['Yes', 'No'], description: 'Select an option', name: 'approval')
                        ]
                    )

                    // Check the user's choice
                    if (proceed != 'Yes') {
                        error("Pipeline stopped by user.")
                    }
                }
            }
        }



        stage('Destroy all Resources') { // Option to destroy Terraform resources
            steps {
                script {
                   
                        dir('infra') {
                            sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }

        stage('Cleanup on Failure') {
            when {
                expression { currentBuild.result == 'FAILURE' || currentBuild.result == null }
            }
            steps {
                script {
                    echo "Pipeline failed. Cleaning up resources..."
                    dir('infra') {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

 post {
    success {
        echo 'EKS cluster and application deployed successfully!'
    }
    failure {
        echo 'Failed to deploy EKS cluster or application. Running cleanup...'
        // Optionally, run terraform destroy here if needed
        dir('infra') {
            sh 'terraform destroy -auto-approve'
        }
    }
}

}
