pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')  // AWS credentials stored in Jenkins
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')  // AWS credentials stored in Jenkins
    }

    stages {
        stage('Navigate to infra Directory') {
            steps {
                dir('infra') {  // Change working directory to root/infra
                    script {
                        echo "Current directory: ${pwd()}"
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir('infra') {  // Run Terraform commands in root/infra
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('infra') {  // Run Terraform commands in root/infra
                    sh 'terraform plan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('root/infra') {  // Run Terraform commands in root/infra
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Output User Name') {
            steps {
                dir('infra') {  // Run Terraform commands in root/infra
                    script {
                        def user_name = sh(script: 'terraform output -raw dummy_user_name', returnStdout: true).trim()
                        echo "Created AWS IAM User: ${user_name}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Terraform apply succeeded!'
        }
        failure {
            echo 'Terraform apply failed!'
        }
    }
}

/*pipeline {
    agent any

    parameters {
        choice(name: 'TERRAFORM_ACTION', choices: ['plan', 'apply', 'destroy'], description: 'Terraform action to perform')
        string(name: 'WORKSPACE', defaultValue: 'default', description: 'Terraform workspace to use')
    }

    environment {
        DOCKER_IMAGE = 'my-python-app'
        DOCKER_TAG = 'latest'
        TF_IN_AUTOMATION = 'true'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Terraform Init') {
            steps {
                dir('infra') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Workspace') {
            steps {
                dir('infra') {
                    script {
                        def workspaceExists = sh(script: "terraform workspace list | grep ${params.WORKSPACE}", returnStatus: true) == 0
                        if (!workspaceExists) {
                            sh "terraform workspace new ${params.WORKSPACE}"
                        } else {
                            sh "terraform workspace select ${params.WORKSPACE}"
                        }
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { params.TERRAFORM_ACTION == 'plan' || params.TERRAFORM_ACTION == 'apply' }
            }
            steps {
                dir('infra') {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { params.TERRAFORM_ACTION == 'apply' }
            }
            steps {
                dir('infra') {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.TERRAFORM_ACTION == 'destroy' }
            }
            steps {
                dir('infra') {
                    sh 'terraform destroy -auto-approve'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").inside {
                        sh 'python -m pytest tests/'
                    }
                }
            }
        }

        stage('Deploy to AWS') {
            when {
                branch 'main'
            }
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
                                    credentialsId: 'aws-credentials',
                                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        dir('infra') {
                            sh 'terraform init'
                            sh 'terraform plan'
                            sh 'terraform apply -auto-approve'
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            node {
                cleanWs()
            }
        }
        success {
            echo 'Terraform operation completed successfully!'
        }
        failure {
            echo 'Terraform operation failed!'
        }
    }
}
*/
