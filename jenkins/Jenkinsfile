pipeline {
    agent any

    parameters {
        booleanParam(name: 'DESTROY_ENV', defaultValue: false, description: 'Destroy environment after deployment?')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')  // Ensure correct credential IDs
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2'
        ECR_REPO_NAME         = 'python-app-repo'
        IMAGE_TAG             = 'latest'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/younann/finalProject.git'
            }
        }

        stage('Configure AWS CLI') {
            steps {
                sh '''
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set region $AWS_DEFAULT_REGION
                '''
            }
        }

stage('Check and Install kubectl') {
    steps {
        script {
            // Check if kubectl is installed
            def kubectlInstalled = sh(script: 'command -v kubectl', returnStatus: true) == 0

            if (!kubectlInstalled) {
                echo "kubectl is not installed. Installing kubectl..."
                sh '''
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    chmod +x kubectl
                    sudo mv kubectl /usr/local/bin/
                '''
                echo "kubectl installed successfully."
            } else {
                echo "kubectl is already installed."
            }

            // Verify kubectl installation
            sh 'kubectl version --client --short'
        }
    }
}

        stage('Terraform Init') {
            steps {
                dir('infra') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('infra') {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Configure kubectl') {
            steps {
                script {
                    sh '''
                        echo "Waiting for EKS cluster to be ready..."
                        sleep 60  # Ensuring EKS is ready
                        aws eks update-kubeconfig --name my-eks-cluster --region us-west-2
                        kubectl get nodes
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def accountId = sh(script: "aws sts get-caller-identity --query Account --output text", returnStdout: true).trim()
                    def ecrUrl = "${accountId}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"

                    sh '''
                        echo "Updating deployment.yaml with new image..."
                        sed -i 's|IMAGE_PLACEHOLDER|''' + ecrUrl + '/' + ECR_REPO_NAME + ':' + IMAGE_TAG + '''|g' k8s/deployment.yaml
                        
                        echo "Deploying application to EKS..."
                        kubectl apply -f k8s/deployment.yaml
                        kubectl apply -f k8s/service.yaml
                    '''
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sh '''
                        echo "Waiting for deployment to be ready..."
                        kubectl wait --for=condition=available --timeout=300s deployment/my-app
                        echo "Deployment is ready!"
                    '''
                }
            }
        }

        stage('Terraform Destroy Option') {
            when {
                beforeAgent true
                expression { return params.DESTROY_ENV }  // Runs only if DESTROY_ENV is set to true
            }
            steps {
                dir('infra') {
                    sh 'terraform destroy -auto-approve'
                }
            }
        }

        stage('Cleanup') {
            when {
                expression { return currentBuild.result == 'FAILURE' }
            }
            steps {
                script {
                    echo "Pipeline failed. Cleaning up resources..."
                    dir('infra') {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'EKS cluster and application deployed successfully!'
        }
        failure {
            echo 'Failed to deploy EKS cluster or application.'
        }
    }
}




/* ###make an empty cluster 
pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2' // Change to your preferred region
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url:'https://github.com/younann/finalProject.git' // Replace with your repo URL
            }
        }


        stage('Terraform Init') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform plan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform apply -auto-approve'
                }
            }
        }
    }

    post {
        success {
            echo 'EKS cluster created successfully!'
        }
        failure {
            echo 'Failed to create EKS cluster.'
        }
        always {
            dir('infra') { // Change to the infra directory
                sh 'terraform destroy -auto-approve' // Clean up resources after the pipeline runs
            }
        }
    }
}
*/
