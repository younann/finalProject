pipeline {
    agent any

    // Arguments on whether we want to create the resource
    parameters {
        booleanParam(name: 'SKIP_TERRAFORM', defaultValue: false, description: 'Skip Terraform deployment?')
    }

    environment { // Global parameters
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2'
        ECR_REPO_NAME         = 'python-app-repo'
        IMAGE_TAG             = 'latest'
        ECR_URL               = '211125613373.dkr.ecr.us-west-2.amazonaws.com/devsecops'
    }

    stages {
        stage('Checkout Code') { // Check the code
            steps {
                git branch: 'main', url: 'https://github.com/younann/finalProject.git'
            }
        }

        stage('AWS Authentication') { // Set AWS CLI for our code
            steps {
                sh '''
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set region $AWS_DEFAULT_REGION
                    aws sts get-caller-identity
                '''
            }
        }

/*stage('Build Docker Image') {
    steps {
        script {
            // Enable BuildKit and build the Docker image
            sh "docker build -t ${ECR_REPO_NAME}:${IMAGE_TAG} ."
        }
    }}
         stage('Run Unit Tests') {
            steps {
                sh 'docker run --rm -e PYTHONPATH=/app -w /app ${ECR_REPO_NAME}:${IMAGE_TAG} pytest'
            }
        }
  

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    // Authenticate Docker to ECR
                    sh '''
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
                        docker login --username AWS --password-stdin ${ECR_URL}
                    '''

                    // Tag the Docker image for ECR
                    sh "docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_URL}:${IMAGE_TAG}"

                    // Push the Docker image to ECR
                    sh "docker push ${ECR_URL}:${IMAGE_TAG}"
                }
            }
        }
     
        stage('Terraform') {
            when {
                expression { return !params.SKIP_TERRAFORM }
            }
            steps {
                dir('infra') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }
    

*/
        
  stage('Generate kubeconfig') {
    steps {
        script {

            // Generate kubeconfig file
            sh """
                aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name devsecops-eks-cluster
            """
        }
    }
}

stage('Verify Kubernetes Connection') {
    steps {
        script {
            // Check cluster info to ensure kubectl is connected properly
            sh "kubectl cluster-info"
        }
    }
}

     stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh "aws eks update-kubeconfig --name devsecops-eks-cluster --region ${AWS_DEFAULT_REGION}"
                    sh "kubectl get nodes"
                    sh "kubectl create namespace devsecops || true"
                    sh "kubectl get pods -n devsecops"
                    sh "kubectl apply -f k8s/aws-auth.yaml"
                    sh  "kubectl create namespace devsecops --dry-run=client -o yaml | kubectl apply -f -"
                    sh "kubectl apply -f k8s/test.yaml"
                    sh "kubectl get pods -n devsecops"
                    
                    sh "kubectl get events -n devsecops"
                    sh "kubectl get configmap aws-auth -n kube-system -o yaml"
                    sh "kubectl describe deployment python-app -n devsecops"
                    sh " kubectl logs python-app-7c46747b6d-6h4z8 -n devsecops"
                    sh "kubectl get svc python-app-service -n devsecops -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'"
                }
            }
        }
    stage('Manual Approval') {
            steps {
                script {
                    // Pause the pipeline and wait for manual approval
                    def proceed = input(
                        id: 'Proceed', 
                        message: 'Do you want to proceed to the next stage?', 
                        parameters: [
                            choice(choices: ['Yes', 'No'], description: 'Select an option', name: 'approval')
                        ]
                    )

                    // Check the user's choice
                    if (proceed != 'Yes') {
                        error("Pipeline stopped by user.")
                    }
                }
            }
        }

stage('Post-Deployment Test') {
    steps {
        script {
            // Wait for the service to be created
            def serviceExists = false
            def retries = 5
            def waitTime = 3 // seconds

            for (int i = 0; i < retries; i++) {
                def serviceStatus = sh(script: "kubectl get svc python-app-service -n devsecops --ignore-not-found", returnStdout: true).trim()
                if (serviceStatus) {
                    serviceExists = true
                    break
                }
                echo "Service 'python-app-service' not found. Retrying in $waitTime seconds..."
                sleep(waitTime)
            }

            if (!serviceExists) {
                error("Service 'python-app-service' not found after $retries retries.")
            }

            // Get LoadBalancer hostname or ClusterIP
            def serviceUrl = sh(script: """
                kubectl get svc python-app-service -n devsecops -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || \
                kubectl get svc python-app-service -n devsecops -o jsonpath='{.spec.clusterIP}'
            """, returnStdout: true).trim()

            echo "Service available at http://$serviceUrl"

            // Test service availability
            def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://$serviceUrl || echo '000'", returnStdout: true).trim()
            if (response != "200") {
                error("Post-deployment test failed! Service returned HTTP code: $response")
            } else {
                echo "Service is up and running!"
            }
        }
    }
}

        stage('Destroy all Resources Option') { // Option to destroy Terraform resources
            when {
                expression { return !params.SKIP_TERRAFORM }
            }
            steps {
                script {
                    def userInput = input(
                        id: 'userInput', 
                        message: 'Do you want to destroy the Terraform environment?', 
                        parameters: [
                            choice(
                                name: 'confirmDestroy', 
                                choices: ['Yes', 'No'], 
                                description: 'Choose "Yes" to destroy or "No" to skip.'
                            )
                        ]
                    )

                    if (userInput == 'Yes') {
                        dir('infra') {
                            sh 'terraform destroy -auto-approve'
                        }
                        echo "Terraform environment destroyed."
                    } else {
                        echo "Terraform destroy skipped."
                    }
                }
            }
        }

        stage('Cleanup on Failure') {
            when {
                expression { currentBuild.result == 'FAILURE' || currentBuild.result == null }
            }
            steps {
                script {
                    echo "Pipeline failed. Cleaning up resources..."
                    dir('infra') {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

 post {
    success {
        echo 'EKS cluster and application deployed successfully!'
    }
    failure {
            echo 'Failed to deploy EKS cluster or application. Running cleanup...'
            script {
                // Run terraform destroy only if SKIP_TERRAFORM is false
                if (!params.SKIP_TERRAFORM) {
                    dir('infra') {
                        sh 'terraform destroy -auto-approve'
                    }
                } else {
                    echo 'Skipping Terraform destroy because SKIP_TERRAFORM is true.'
                }
            }
        }
    }
}
