pipeline {
    agent any

    parameters {
        booleanParam(name: 'DESTROY_ENV', defaultValue: false, description: 'Destroy environment after deployment?')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2'
        ECR_REPO_NAME         = 'python-app-repo'
        IMAGE_TAG             = 'latest'
        ECR_URL               = '211125613373.dkr.ecr.us-west-2.amazonaws.com/devsecops'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/younann/finalProject.git'
            }
        }

        stage('AWS Authentication') {
            steps {
                sh '''
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set region $AWS_DEFAULT_REGION
                    aws sts get-caller-identity
                '''
            }
        }

        stage('Build Docker Image') { 
            steps { 
                script {
                    sh """
                        aws ecr get-login-password --region $AWS_DEFAULT_REGION | \
                        docker login --username AWS --password-stdin $ECR_URL
                        docker build -t $ECR_URL:$IMAGE_TAG -f Dockerfile .
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh """
                        docker tag $ECR_URL:$IMAGE_TAG $ECR_URL:$IMAGE_TAG
                        docker push $ECR_URL:$IMAGE_TAG
                    """
                }
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                dir('infra') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig([credentialsId: 'kubelogin']) {
                    sh '''
                        kubectl apply -f test.yaml --namespace=devsecops
                        kubectl rollout restart deployment my-app -n devsecops
                    '''
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sh '''
                        echo "Waiting for deployment to be ready..."
                        kubectl wait --for=condition=available --timeout=300s deployment/my-app -n devsecops
                        echo "Deployment is ready!"
                    '''
                }
            }
        }

        stage('Terraform Destroy Option') {
            when {
                beforeAgent true
                expression { return params.DESTROY_ENV }
            }
            steps {
                dir('infra/terraform') {
                    sh 'terraform destroy -auto-approve'
                }
            }
        }

        stage('Cleanup on Failure') {
            when {
                expression { currentBuild.result == 'FAILURE' || currentBuild.result == null }
            }
            steps {
                script {
                    echo "Pipeline failed. Cleaning up resources..."
                    dir('infra/terraform') {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'EKS cluster and application deployed successfully!'
        }
        failure {
            echo 'Failed to deploy EKS cluster or application.'
        }
    }
}





/* ###make an empty cluster 
pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2' // Change to your preferred region
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url:'https://github.com/younann/finalProject.git' // Replace with your repo URL
            }
        }


        stage('Terraform Init') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform plan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform apply -auto-approve'
                }
            }
        }
    }

    post {
        success {
            echo 'EKS cluster created successfully!'
        }
        failure {
            echo 'Failed to create EKS cluster.'
        }
        always {
            dir('infra') { // Change to the infra directory
                sh 'terraform destroy -auto-approve' // Clean up resources after the pipeline runs
            }
        }
    }
}
*/
