pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2'
        ECR_REPO_NAME         = 'python-app-repo'
        IMAGE_TAG             = 'latest'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/younann/finalProject.git'
            }
        }

 stage('Build & Push Docker Image') {
            steps {
                script {
                    // Get the AWS account ID
                    def accountId = sh(script: "aws sts get-caller-identity --query Account --output text", returnStdout: true).trim()
                    def ecrUrl = "${accountId}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"

                    try {
                        // Log in to AWS ECR
                        echo "Logging into AWS ECR..."
                        sh """
                            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
                            docker login --username AWS --password-stdin ${ecrUrl}
                        """

                        // Build the Docker image using BuildKit
                        echo "Building Docker image..."
                        sh """
                            DOCKER_BUILDKIT=1 docker build -t ${ECR_REPO_NAME} .
                        """

                        // Tag the Docker image
                        echo "Tagging Docker image..."
                        sh """
                            docker tag ${ECR_REPO_NAME} ${ecrUrl}/${ECR_REPO_NAME}:${IMAGE_TAG}
                        """

                        // Push the Docker image to ECR
                        echo "Pushing Docker image to ECR..."
                        sh """
                            docker push ${ecrUrl}/${ECR_REPO_NAME}:${IMAGE_TAG}
                        """

                        echo "Docker image successfully built and pushed to ECR!"
                    } catch (Exception e) {
                        echo "Error building or pushing Docker image: ${e}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
    }

        stage('Terraform Init') {
            steps {
                dir('infra') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('infra') {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Configure kubectl') {
            steps {
                script {
                    sh '''
                        aws eks update-kubeconfig --name my-eks-cluster --region us-west-2
                        kubectl get nodes
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def accountId = sh(script: "aws sts get-caller-identity --query Account --output text", returnStdout: true).trim()
                    def ecrUrl = "${accountId}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"

                    sh '''
                        echo "Updating deployment.yaml with new image..."
                        sed -i 's|IMAGE_PLACEHOLDER|''' + ecrUrl + '/' + ECR_REPO_NAME + ':' + IMAGE_TAG + '''|g' k8s/deployment.yaml
                        
                        echo "Deploying application to EKS..."
                        kubectl apply -f k8s/deployment.yaml
                        kubectl apply -f k8s/service.yaml
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'EKS cluster and application deployed successfully!'
        }
        failure {
            echo 'Failed to deploy EKS cluster or application.'
        }
    }
}


/* ###make an empty cluster 
pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2' // Change to your preferred region
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url:'https://github.com/younann/finalProject.git' // Replace with your repo URL
            }
        }


        stage('Terraform Init') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform plan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform apply -auto-approve'
                }
            }
        }
    }

    post {
        success {
            echo 'EKS cluster created successfully!'
        }
        failure {
            echo 'Failed to create EKS cluster.'
        }
        always {
            dir('infra') { // Change to the infra directory
                sh 'terraform destroy -auto-approve' // Clean up resources after the pipeline runs
            }
        }
    }
}
*/
