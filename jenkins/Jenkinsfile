pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2' // Change to your preferred region
        ECR_REPO_NAME         = 'python-app-repo' // Ensure this matches your Terraform variable
        IMAGE_TAG             = 'latest'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/younann/finalProject.git' // Replace with your repo URL
            }
        }

stage('Build Docker Image') {
            steps {
                script {
                    def accountId = sh(script: 'aws sts get-caller-identity --query Account --output text', returnStdout: true).trim()
                    def ecrUrl = "${accountId}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"

                    sh '''
                        echo "Logging in to AWS ECR..."
                        aws ecr get-login-password --region ''' + "${AWS_DEFAULT_REGION}" + ''' | docker login --username AWS --password-stdin ''' + "${ecrUrl}" + '''
                        
                        echo "Building Docker image..."
                        docker build -t ''' + "${ECR_REPO_NAME}:${IMAGE_TAG}" + ''' .
                        
                        echo "Tagging image..."
                        docker tag ''' + "${ECR_REPO_NAME}:${IMAGE_TAG}" + ''' ''' + "${ecrUrl}/${ECR_REPO_NAME}:${IMAGE_TAG}" + '''
                        
                        echo "Pushing image to ECR..."
                        docker push ''' + "${ecrUrl}/${ECR_REPO_NAME}:${IMAGE_TAG}" + '''
                    '''
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir('infra') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('infra') {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Configure kubectl') {
            steps {
                script {
                    sh '''
                        aws eks update-kubeconfig --name my-eks-cluster --region us-west-2
                        kubectl get nodes
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh """
                        echo "Updating test.yaml with the new image..."
                        sed -i 's|IMAGE_PLACEHOLDER|$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG|g' k8s/test.yaml
                        
                        echo "Deploying application to EKS..."
                        kubectl apply -f k8s/test.yaml
                        kubectl apply -f k8s/service.yaml
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'EKS cluster and application deployed successfully!'
        }
        failure {
            echo 'Failed to deploy EKS cluster or application.'
        }
    }
}

/* ###make an empty cluster 
pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-access-key')
        AWS_DEFAULT_REGION    = 'us-west-2' // Change to your preferred region
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url:'https://github.com/younann/finalProject.git' // Replace with your repo URL
            }
        }


        stage('Terraform Init') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform plan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('infra') { // Change to the infra directory
                    sh 'terraform apply -auto-approve'
                }
            }
        }
    }

    post {
        success {
            echo 'EKS cluster created successfully!'
        }
        failure {
            echo 'Failed to create EKS cluster.'
        }
        always {
            dir('infra') { // Change to the infra directory
                sh 'terraform destroy -auto-approve' // Clean up resources after the pipeline runs
            }
        }
    }
}
*/
