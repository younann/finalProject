pipeline {
    agent any

    parameters {
        choice(name: 'TERRAFORM_ACTION', choices: ['plan', 'apply', 'destroy'], description: 'Terraform action to perform')
        string(name: 'WORKSPACE', defaultValue: 'default', description: 'Terraform workspace to use')
    }

    environment {
        DOCKER_IMAGE = 'my-python-app'
        DOCKER_TAG = 'latest'
        TF_IN_AUTOMATION = 'true'
        TERRAFORM_BACKEND_BUCKET = 'your-terraform-backend-bucket'  // Replace with actual bucket name
        AWS_REGION = 'us-east-1'  // Ensure this matches your AWS region
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Check & Setup Terraform Backend') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-access-key',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        def bucketExists = sh(
                            script: "aws s3api head-bucket --bucket ${env.TERRAFORM_BACKEND_BUCKET} 2>/dev/null",
                            returnStatus: true
                        ) == 0

                        if (!bucketExists) {
                            echo "S3 backend bucket does not exist. Creating..."
                            sh "aws s3api create-bucket --bucket ${env.TERRAFORM_BACKEND_BUCKET} --region ${env.AWS_REGION} --create-bucket-configuration LocationConstraint=${env.AWS_REGION}"
                            sh "aws s3api put-bucket-versioning --bucket ${env.TERRAFORM_BACKEND_BUCKET} --versioning-configuration Status=Enabled"
                            sh "aws s3api put-bucket-encryption --bucket ${env.TERRAFORM_BACKEND_BUCKET} --server-side-encryption-configuration '{\"Rules\": [{\"ApplyServerSideEncryptionByDefault\": {\"SSEAlgorithm\": \"AES256\"}}]}'"
                        } else {
                            echo "S3 backend bucket already exists."
                        }
                    }
                }
            }
        }

        stage('Terraform Init & Workspace') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-access-key',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    dir('infra') {
                        script {
                            sh 'terraform init'

                            def workspaceExists = sh(script: "terraform workspace list | grep -q ${params.WORKSPACE}", returnStatus: true) == 0
                            if (!workspaceExists) {
                                sh "terraform workspace new ${params.WORKSPACE}"
                            } else {
                                sh "terraform workspace select ${params.WORKSPACE}"
                            }
                        }
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when { expression { params.TERRAFORM_ACTION == 'plan' || params.TERRAFORM_ACTION == 'apply' } }
            steps {
                dir('infra') {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Terraform Apply') {
            when { expression { params.TERRAFORM_ACTION == 'apply' } }
            steps {
                dir('infra') {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Terraform Destroy') {
            when { expression { params.TERRAFORM_ACTION == 'destroy' } }
            steps {
                dir('infra') {
                    sh 'terraform destroy -auto-approve'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}", '.')
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").inside {
                        sh 'python -m pytest tests/'
                    }
                }
            }
        }

        stage('Deploy to AWS') {
            when { branch 'main' }
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-access-key',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    dir('infra') {
                        sh 'terraform init'
                        sh 'terraform plan'
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Terraform operation completed successfully!'
        }
        failure {
            echo 'Terraform operation failed!'
        }
    }
}
