apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-app
  namespace: devsecops
  labels:
    app: python-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: python-app
  template:
    metadata:
      labels:
        app: python-app
    spec:
      containers:
        - name: python-app
          image: 211125613373.dkr.ecr.us-west-2.amazonaws.com/devsecops:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"
            requests:
              cpu: "200m"
              memory: "256Mi"
          env:
            - name: FLASK_ENV
              value: "production"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
          livenessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 5
            periodSeconds: 5
      restartPolicy: Always
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      - arm64
---
apiVersion: v1
kind: Service
metadata:
  name: python-app-service
  namespace: devsecops
spec:
  selector:
    app: python-app
  ports:
    - port: 80
      targetPort: 5000
  type: LoadBalancer
  externalTrafficPolicy: Local
